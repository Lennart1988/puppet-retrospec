#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 817)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'72,74,140,-260,56,67,362,68,-263,111,-139,-251,269,157,448,291,314,286',
'292,424,363,-262,424,113,20,116,123,110,112,374,47,425,50,270,62,12',
'-265,54,41,44,380,49,42,10,11,-260,158,57,19,115,-263,43,-139,-251,17',
'18,-134,129,315,98,97,122,79,-262,93,94,72,74,48,124,159,92,40,75,285',
'77,78,76,-265,-138,55,63,65,64,58,59,60,61,51,-180,-180,53,72,74,66',
'382,56,67,-134,68,99,111,-136,420,383,419,125,126,127,128,420,257,419',
'-176,-176,113,20,116,123,110,112,-138,47,257,50,373,62,134,357,54,41',
'44,293,49,42,-174,-174,295,294,57,19,115,389,43,-136,372,17,18,391,129',
'371,98,97,122,79,261,93,94,-179,-179,48,124,259,92,40,75,257,77,78,-175',
'-175,-137,55,63,65,64,58,59,60,61,51,-177,-177,53,72,74,66,288,56,67',
'398,68,99,111,-177,-177,-180,-180,125,126,127,128,131,132,306,307,399',
'113,20,116,288,110,112,-137,47,401,50,312,62,12,313,54,41,44,81,49,42',
'10,11,-179,-179,57,19,115,403,43,-174,-174,17,18,257,95,96,98,97,361',
'79,406,93,94,-178,-178,48,91,123,92,40,75,357,77,78,269,131,132,55,63',
'65,64,58,59,60,61,51,269,273,53,72,74,66,351,56,67,270,68,99,129,269',
'412,269,122,413,269,-178,-178,358,91,262,124,123,273,20,273,247,246',
'273,417,47,270,50,270,62,12,270,54,41,44,357,49,42,10,11,304,421,57',
'19,423,353,43,83,129,17,18,179,122,125,126,127,128,79,176,350,124,433',
'174,48,293,436,346,40,75,312,77,78,344,343,140,55,63,65,64,58,59,60',
'61,51,288,440,53,72,74,66,320,56,67,149,68,468,377,125,126,127,128,443',
'312,83,446,312,141,91,91,123,140,20,451,423,453,123,91,47,119,50,454',
'62,12,455,54,41,44,456,49,42,10,11,312,91,57,19,460,461,43,462,129,17',
'18,463,122,464,129,91,312,79,122,83,124,472,473,48,80,475,124,40,75',
'476,77,78,477,346,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,',
'68,466,111,125,126,127,128,,,125,126,127,128,,,,113,20,116,,110,112',
',47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,115,,43,,,17,18,,95,96',
'98,97,,79,,93,94,,,48,,123,92,40,75,,77,78,,,,55,63,65,64,58,59,60,61',
'51,,,53,72,74,66,,56,67,,68,99,129,,,,122,,,409,,,,,124,123,,20,,,,',
',47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,129,17,18,,122,125',
'126,127,128,79,,,124,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61',
'51,,,53,72,74,66,,56,67,,68,,111,125,126,127,128,,,,,,,,123,,113,20',
'116,123,110,112,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,115,,43',
'129,,17,18,122,129,,,,122,79,,124,,,,48,124,,92,40,75,,77,78,,,,55,63',
'65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,125,126,127,128,,125',
'126,127,128,,,,123,,,20,,,-250,123,,47,,50,,62,12,,54,41,44,,49,42,10',
'11,,,57,19,,,43,129,,17,18,122,,,129,,,79,122,124,,,,48,-250,,124,40',
'75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,125',
'126,127,128,,,,125,126,127,128,,,,,20,,,,,,47,,50,,62,134,,54,41,44',
',49,42,,,,,57,19,,,43,,,17,18,84,85,86,,,,79,,,,,,48,,,,40,75,,77,78',
',,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,459,111,,,,87',
'89,88,90,72,74,,,159,,113,20,116,,110,112,,47,,50,,62,12,,54,41,44,',
'49,42,10,11,,,57,19,115,,43,,,17,18,157,,,154,,,79,72,74,,,159,48,,',
'92,40,75,,77,78,,,79,55,63,65,64,58,59,60,61,51,158,75,53,72,74,66,',
'56,67,,68,,111,157,,,154,,,,72,74,,,159,,113,20,116,,110,112,,47,,50',
'79,62,134,,54,41,44,,49,42,158,75,,,57,19,115,,43,,,17,18,157,,,154',
',,79,72,74,,,159,48,,,,40,75,,77,78,,,79,55,63,65,64,58,59,60,61,51',
'158,75,53,72,74,66,,56,67,,68,,111,157,,,154,,,,,,,,,,113,20,116,,110',
'112,,47,,50,79,62,134,,54,41,44,,49,42,158,75,,,57,19,115,,43,,,17,18',
',,,,,,79,,93,94,,,48,,,92,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51',
',,53,72,74,66,111,56,67,,68,,111,,,,,,,,113,,116,,110,112,113,20,116',
',110,112,,47,,50,,62,134,,54,41,44,,49,42,115,,,,57,19,115,,43,,,17',
'18,,,93,94,,,79,,,92,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61',
'51,,,53,72,74,66,,56,67,,68,,111,,,,,,,,,,,,,,113,20,116,,110,112,,47',
',50,,62,12,,54,41,44,,49,42,10,11,,,57,19,115,,43,,,17,18,,,,,,,79,',
'93,94,,,48,,,92,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74',
'66,111,56,67,,68,,111,,,,,,,,113,,116,,110,112,113,20,116,,110,112,',
'47,,50,,62,134,,54,41,44,,49,42,115,,,,57,19,115,,43,,,17,18,,,,,,,79',
',,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66',
',56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,',
',,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64',
'58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,',
'50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48',
',,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,',
'68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19',
',,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60',
'61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134',
',54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77',
'78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,',
',,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18',
',,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53',
'72,74,66,,56,67,,68,,,313,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41',
'44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,',
',55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,167,,,,,,,,,,,',
',,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18',
',,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53',
'72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44',
',49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,',
',,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,',
',,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,',
',,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72',
'74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49',
'42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55',
'63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,355,,,,,,,,,,,,,,,',
'20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,',
',,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72',
'74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49',
'42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63',
'65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,365,,,,,,,,,,,,,,,,20',
',,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,',
',79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74',
'66,,56,67,,68,367,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49',
'42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55',
'63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20',
',,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79',
',,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66',
',56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10',
'11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65',
'64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47',
',50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,',
',48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56',
'67,163,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10',
'11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65',
'64,58,59,60,61,51,,,53,72,74,66,,56,67,165,68,,,,,,,,,,,,,,,,,20,,,',
',,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79',
',,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66',
',56,67,,68,167,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42',
'10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63',
'65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,',
',,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79',
',,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66',
',56,67,,68,283,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42',
'10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63',
'65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,',
',,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79',
',,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66',
',56,67,,178,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42',
',,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65',
'64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47',
',50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,',
',48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56',
'67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11',
',,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64',
'58,59,60,61,51,,,53,72,74,66,,56,67,,68,426,,,,,,,,,,,,,,,,20,,,,,,47',
',50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48',
',,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,',
'68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57',
'19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59',
'60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62',
'12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40',
'75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,',
',,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,',
'43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60',
'61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12',
',54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75',
',77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,',
',,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43',
',,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61',
'51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54',
'41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77',
'78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,',
',,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17',
'18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,',
'53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41',
'44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78',
',,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,',
',,,20,,,,,,195,214,205,215,62,207,217,208,41,194,,197,192,,,,,57,19',
'218,213,193,,,17,191,,,,,,,79,,,,,216,196,,,,40,75,,77,78,,,,209,210',
'212,211,200,201,202,203,206,219,,53,72,74,66,,56,67,,68,,,,,,,,,,,,',
',,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,',
',,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72',
'74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49',
'42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63',
'65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,',
',,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,',
',,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56',
'67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57',
'19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59',
'60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62',
'134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75',
',77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,',
',,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17',
'18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,',
'53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41',
'44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,',
',55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,',
',20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,',
',,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74',
'66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42',
',,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65',
'64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47',
',50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48',
',,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,',
'68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19',
',,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60',
'61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134',
',54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77',
'78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,',
',,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18',
',,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53',
'72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44',
',49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55',
'63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20',
',,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79',
',,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66',
',56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,',
',,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64',
'58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,',
'50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48',
',,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,',
'68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19',
',,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60',
'61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134',
',54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,241,40,75',
',77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,',
',,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17',
'18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,',
'53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,245,,,,,47,,50,,62,12,,54',
'41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77',
'78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,',
',,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17',
'18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,',
'53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41',
'44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,',
',55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,',
',20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,',
',,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74',
'66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42',
',,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65',
'64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47',
',50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48',
',,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,',
'68,384,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12,,54,41,44,,49,42,10,11,',
',57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64',
'58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,',
'50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48',
',,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,',
'68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19',
',,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60',
'61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,12',
',54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75',
',77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,',
',,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17',
'18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,',
'53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,275,,,,,47,,50,,62,12,,54',
'41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77',
'78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,',
',,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18',
',,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53',
'72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44',
',49,42,,,,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55',
'63,65,64,58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20',
',,,,,47,,50,,62,134,,54,41,44,,49,42,,,,,57,19,,,43,,,17,18,,,,,,,79',
',,,,,48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,,53,72,74,66',
',56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,,50,,62,134,,54,41,44,,49,42,',
',,,57,19,,,43,,,17,18,,,,,,,79,,,,,,48,,,,40,75,,77,78,,,,55,63,65,64',
'58,59,60,61,51,,,53,72,74,66,,56,67,,68,,,,,,,,,,,,,,,,,20,,,,,,47,',
'50,,62,12,,54,41,44,,49,42,10,11,,,57,19,,,43,,,17,18,,,,,,,79,,,,,',
'48,,,,40,75,,77,78,,,,55,63,65,64,58,59,60,61,51,,111,53,276,,66,,,',
',,,,107,102,113,,116,,110,112,,103,105,104,106,,,,,,,,,,,,,,,,115,,',
',109,108,,,95,96,98,97,100,101,,93,94,111,,277,,,92,,,,,,,107,102,113',
',116,,110,112,,103,105,104,106,,,,,,,,,,99,,,,,,115,,,,109,108,,,95',
'96,98,97,100,101,,93,94,111,,278,,,92,,,,,,,107,102,113,,116,111,110',
'112,,103,105,104,106,,,,,,,113,,116,99,110,112,,,,115,,,,109,108,,,95',
'96,98,97,100,101,,93,94,115,,,,,92,,,95,96,98,97,100,101,111,93,94,',
',,,,92,,,,107,102,113,,116,,110,112,99,103,105,104,106,,,,,,,,,,,,,99',
',,115,,,,109,108,,,95,96,98,97,100,101,111,93,94,,,,,,92,,,,107,102',
'113,,116,,110,112,,103,105,104,106,,,,,,,,,,,,,99,,,115,,,,109,108,',
',95,96,98,97,100,101,111,93,94,,,,,,92,,,,107,102,113,,116,,110,112',
',103,105,104,106,,,,,,,,,,,,,99,,,115,,,,109,108,,,95,96,98,97,100,101',
'111,93,94,,,,,,92,,,,107,102,113,,116,,110,112,,103,105,104,106,,,,',
',,,,,,,,99,,,115,,,,109,108,,,95,96,98,97,100,101,111,93,94,,,,,,92',
',,,107,102,113,,116,,110,112,,103,105,104,106,,,,,,,,,,,,,99,,,115,',
',,109,108,,,95,96,98,97,100,101,111,93,94,,,,,,92,,,,107,102,113,,116',
',110,112,,103,105,104,106,,,,,,,,,,,,,99,,,115,,,,109,108,,,95,96,98',
'97,100,101,111,93,94,,,,,,92,,,,107,102,113,347,116,,110,112,,103,105',
'104,106,,,,,,,,,,,,,99,,,115,,,,109,108,,,95,96,98,97,100,101,111,93',
'94,,,,,,92,,,,107,102,113,,116,,110,112,,103,105,104,106,,,,,,,,,,,',
',99,,,115,,,,109,108,,,95,96,98,97,100,101,111,93,94,,,,,,92,,,,107',
'102,113,,116,111,110,112,,103,105,104,106,,,,,,,113,,116,,110,112,99',
',,115,,,,109,108,,,95,96,98,97,100,101,,93,94,115,,,,,92,,,95,96,98',
'97,100,101,111,93,94,,,,,,92,,,,107,102,113,,116,,110,112,99,103,105',
'104,106,,,,,,,,,,,,,99,,,115,,,,109,108,,,95,96,98,97,100,101,111,93',
'94,,,,,,92,,,,107,102,113,,116,,110,112,,103,105,104,106,,,,,,,,,,,',
',99,,,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,,102,113,92,116',
',110,112,,103,,,,,306,307,,,,,,,,,,,,,115,,,,99,,,,95,96,98,97,100,101',
'111,93,94,,,316,,,92,,,,107,102,113,,116,,110,112,,103,105,104,106,',
',,,,,,,,,,,99,,,115,,,,109,108,,111,95,96,98,97,100,101,,93,94,,,107',
'102,113,92,116,,110,112,,103,105,104,106,,,,,,,,,,,,,,,,115,,,,99,108',
',111,95,96,98,97,100,101,,93,94,,,107,102,113,92,116,111,110,112,,103',
'105,104,106,,,,,,102,113,,116,,110,112,,103,,115,,,,99,,,,95,96,98,97',
'100,101,,93,94,115,,,,,92,,111,95,96,98,97,100,101,,93,94,,,,102,113',
'92,116,111,110,112,,103,,,,,,99,,,102,113,,116,,110,112,,103,,115,,',
',99,,,,95,96,98,97,100,101,,93,94,115,,,,,92,,,95,96,98,97,100,101,111',
'93,94,,,,,,92,,,,107,102,113,310,116,,110,112,99,103,105,104,106,,,',
',,,,,,,,,99,,,115,,,,109,108,,,95,96,98,97,100,101,,93,94,,334,214,333',
'215,92,331,217,335,,324,,330,332,,,,,,,218,213,336,,,,329,,,,,,,,99',
',,,216,337,,,,,,,,,,,,340,341,339,338,325,326,327,328,342,219,334,214',
'333,215,,331,217,335,,324,,330,332,,,,,,,218,213,336,,,,329,,,,,,,,',
',,,216,337,,,,,,,,,,,,340,341,339,338,325,326,327,328,342,219,334,214',
'333,215,,331,217,335,,324,,330,332,,,,,,,218,213,336,,,,329,,,,,,,,',
',,,216,337,,,,,,,,,,,,340,341,339,338,325,326,327,328,342,219,334,214',
'333,215,,331,217,335,,324,,330,332,,,,,,,218,213,336,,,,329,,,,,,,,',
',,,216,337,,,,,,,,,,,,340,341,339,338,325,326,327,328,342,219,334,214',
'333,215,,331,217,335,,324,,330,332,,,,,,,218,213,336,,,,329,,,,,,,,',
',,,216,337,,,,,,,,,,,,340,341,339,338,325,326,327,328,342,219,334,214',
'333,215,,331,217,335,,324,,330,332,,,,,,,218,213,336,,,,329,,,,,,,,',
',,,216,337,,,,,,,,,,,,340,341,339,338,325,326,327,328,342,219' ]
        racc_action_table = arr = ::Array.new(9676, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,401,193,0,0,274,0,212,224,203,192,271,286,416,166,204,152,166,416',
'274,211,368,224,0,224,50,224,224,282,0,368,0,271,0,0,210,0,0,0,287,0',
'0,0,0,193,286,0,0,224,212,0,203,192,0,0,194,50,204,224,224,50,0,211',
'224,224,174,174,0,50,174,224,0,0,150,0,0,0,210,202,0,0,0,0,0,0,0,0,0',
'203,203,0,462,462,0,289,462,462,194,462,224,223,200,365,290,365,50,50',
'50,50,417,147,417,57,57,223,462,223,51,223,223,202,462,146,462,281,462',
'462,303,462,462,462,308,462,462,194,194,171,171,462,462,223,309,462',
'200,280,462,462,311,51,279,223,223,51,462,139,223,223,202,202,462,51',
'137,223,462,462,160,462,462,56,56,201,462,462,462,462,462,462,462,462',
'462,200,200,462,4,4,462,162,4,4,317,4,223,228,58,58,61,61,51,51,51,51',
'52,52,389,389,319,228,4,228,164,228,228,201,4,321,4,323,4,4,329,4,4',
'4,4,4,4,4,4,60,60,4,4,228,345,4,44,44,4,4,120,228,228,228,228,272,4',
'348,228,228,201,201,4,118,134,228,4,4,352,4,4,140,16,16,4,4,4,4,4,4',
'4,4,4,270,140,4,454,454,4,257,454,454,140,454,228,134,176,354,257,134',
'356,357,59,59,269,117,140,134,130,176,454,257,114,113,357,364,454,176',
'454,257,454,454,357,454,454,454,263,454,454,454,454,176,366,454,454',
'367,258,454,82,130,454,454,80,130,134,134,134,134,454,76,255,130,375',
'75,454,169,388,252,454,454,390,454,454,251,249,245,454,454,454,454,454',
'454,454,454,454,244,397,454,453,453,454,243,453,453,53,453,453,284,130',
'130,130,130,402,405,180,410,411,46,185,186,55,45,453,420,421,423,12',
'187,453,12,453,425,453,453,428,453,453,453,431,453,453,453,453,432,188',
'453,453,435,438,453,439,55,453,453,445,55,447,12,8,190,453,12,5,55,457',
'458,453,1,465,12,453,453,467,453,453,469,474,,453,453,453,453,453,453',
'453,453,453,,,453,451,451,453,,451,451,,451,451,229,55,55,55,55,,,12',
'12,12,12,,,,229,451,229,,229,229,,451,,451,,451,451,,451,451,451,,451',
'451,451,451,,,451,451,229,,451,,,451,451,,229,229,229,229,,451,,229',
'229,,,451,,350,229,451,451,,451,451,,,,451,451,451,451,451,451,451,451',
'451,,,451,197,197,451,,197,197,,197,229,350,,,,350,,,350,,,,,350,148',
',197,,,,,,197,,197,,197,197,,197,197,197,,197,197,,,,,197,197,,,197',
',148,197,197,,148,350,350,350,350,197,,,148,,,197,,,,197,197,,197,197',
',,,197,197,197,197,197,197,197,197,197,,,197,10,10,197,,10,10,,10,,221',
'148,148,148,148,,,,,,,,209,,221,10,221,206,221,221,,10,,10,,10,10,,10',
'10,10,,10,10,10,10,,,10,10,221,,10,209,,10,10,209,206,,,,206,10,,209',
',,,10,206,,221,10,10,,10,10,,,,10,10,10,10,10,10,10,10,10,,,10,11,11',
'10,,11,11,,11,,209,209,209,209,,206,206,206,206,,,,207,,,11,,,207,205',
',11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11,,,11,207,,11,11,207,,',
'205,,,11,205,207,,,,11,207,,205,11,11,,11,11,,,,11,11,11,11,11,11,11',
'11,11,,,11,196,196,11,,196,196,,196,,207,207,207,207,,,,205,205,205',
'205,,,,,196,,,,,,196,,196,,196,196,,196,196,196,,196,196,,,,,196,196',
',,196,,,196,196,7,7,7,,,,196,,,,,,196,,,,196,196,,196,196,,,,196,196',
'196,196,196,196,196,196,196,,,196,433,433,196,,433,433,,433,433,222',
',,,7,7,7,7,285,285,,,285,,222,433,222,,222,222,,433,,433,,433,433,,433',
'433,433,,433,433,433,433,,,433,433,222,,433,,,433,433,285,,,285,,,433',
'208,208,,,208,433,,,222,433,433,,433,433,,,285,433,433,433,433,433,433',
'433,433,433,285,285,433,17,17,433,,17,17,,17,,135,208,,,208,,,,377,377',
',,377,,135,17,135,,135,135,,17,,17,208,17,17,,17,17,17,,17,17,208,208',
',,17,17,135,,17,,,17,17,377,,,377,,,17,54,54,,,54,17,,,,17,17,,17,17',
',,377,17,17,17,17,17,17,17,17,17,377,377,17,18,18,17,,18,18,,18,,226',
'54,,,54,,,,,,,,,,226,18,226,,226,226,,18,,18,54,18,18,,18,18,18,,18',
'18,54,54,,,18,18,226,,18,,,18,18,,,,,,,18,,226,226,,,18,,,226,18,18',
',18,18,,,,18,18,18,18,18,18,18,18,18,,,18,19,19,18,225,19,19,,19,,133',
',,,,,,,225,,225,,225,225,133,19,133,,133,133,,19,,19,,19,19,,19,19,19',
',19,19,225,,,,19,19,133,,19,,,19,19,,,225,225,,,19,,,225,,,19,,,,19',
'19,,19,19,,,,19,19,19,19,19,19,19,19,19,,,19,20,20,19,,20,20,,20,,227',
',,,,,,,,,,,,,227,20,227,,227,227,,20,,20,,20,20,,20,20,20,,20,20,20',
'20,,,20,20,227,,20,,,20,20,,,,,,,20,,227,227,,,20,,,227,20,20,,20,20',
',,,20,20,20,20,20,20,20,20,20,,,20,424,424,20,220,424,424,,424,,136',
',,,,,,,220,,220,,220,220,136,424,136,,136,136,,424,,424,,424,424,,424',
'424,424,,424,424,220,,,,424,424,136,,424,,,424,424,,,,,,,424,,,,,,424',
',,,424,424,,424,424,,,,424,424,424,424,424,424,424,424,424,,,424,419',
'419,424,,419,419,,419,,,,,,,,,,,,,,,,,419,,,,,,419,,419,,419,419,,419',
'419,419,,419,419,,,,,419,419,,,419,,,419,419,,,,,,,419,,,,,,419,,,,419',
'419,,419,419,,,,419,419,419,419,419,419,419,419,419,,,419,195,195,419',
',195,195,,195,,,,,,,,,,,,,,,,,195,,,,,,195,,195,,195,195,,195,195,195',
',195,195,,,,,195,195,,,195,,,195,195,,,,,,,195,,,,,,195,,,,195,195,',
'195,195,,,,195,195,195,195,195,195,195,195,195,,,195,47,47,195,,47,47',
',47,,,,,,,,,,,,,,,,,47,,,,,,47,,47,,47,47,,47,47,47,,47,47,,,,,47,47',
',,47,,,47,47,,,,,,,47,,,,,,47,,,,47,47,,47,47,,,,47,47,47,47,47,47,47',
'47,47,,,47,48,48,47,,48,48,,48,,,,,,,,,,,,,,,,,48,,,,,,48,,48,,48,48',
',48,48,48,,48,48,,,,,48,48,,,48,,,48,48,,,,,,,48,,,,,,48,,,,48,48,,48',
'48,,,,48,48,48,48,48,48,48,48,48,,,48,49,49,48,,49,49,,49,,,,,,,,,,',
',,,,,,49,,,,,,49,,49,,49,49,,49,49,49,,49,49,,,,,49,49,,,49,,,49,49',
',,,,,,49,,,,,,49,,,,49,49,,49,49,,,,49,49,49,49,49,49,49,49,49,,,49',
'191,191,49,,191,191,,191,,,191,,,,,,,,,,,,,,191,,,,,,191,,191,,191,191',
',191,191,191,,191,191,,,,,191,191,,,191,,,191,191,,,,,,,191,,,,,,191',
',,,191,191,,191,191,,,,191,191,191,191,191,191,191,191,191,,,191,178',
'178,191,,178,178,,178,178,,,,,,,,,,,,,,,,178,,,,,,178,,178,,178,178',
',178,178,178,,178,178,178,178,,,178,178,,,178,,,178,178,,,,,,,178,,',
',,,178,,,,178,178,,178,178,,,,178,178,178,178,178,178,178,178,178,,',
'178,406,406,178,,406,406,,406,,,,,,,,,,,,,,,,,406,,,,,,406,,406,,406',
'406,,406,406,406,,406,406,406,406,,,406,406,,,406,,,406,406,,,,,,,406',
',,,,,406,,,,406,406,,406,406,,,,406,406,406,406,406,406,406,406,406',
',,406,241,241,406,,241,241,,241,,,,,,,,,,,,,,,,,241,,,,,,241,,241,,241',
'241,,241,241,241,,241,241,,,,,241,241,,,241,,,241,241,,,,,,,241,,,,',
',241,,,,241,241,,241,241,,,,241,241,241,241,241,241,241,241,241,,,241',
'298,298,241,,298,298,,298,,,,,,,,,,,,,,,,,298,,,,,,298,,298,,298,298',
',298,298,298,,298,298,298,298,,,298,298,,,298,,,298,298,,,,,,,298,,',
',,,298,,,,298,298,,298,298,,,,298,298,298,298,298,298,298,298,298,,',
'298,261,261,298,,261,261,,261,261,,,,,,,,,,,,,,,,261,,,,,,261,,261,',
'261,261,,261,261,261,,261,261,261,261,,,261,261,,,261,,,261,261,,,,',
',,261,,,,,,261,,,,261,261,,261,261,,,,261,261,261,261,261,261,261,261',
'261,,,261,398,398,261,,398,398,,398,,,,,,,,,,,,,,,,,398,,,,,,398,,398',
',398,398,,398,398,398,,398,398,,,,,398,398,,,398,,,398,398,,,,,,,398',
',,,,,398,,,,398,398,,398,398,,,,398,398,398,398,398,398,398,398,398',
',,398,276,276,398,,276,276,,276,276,,,,,,,,,,,,,,,,276,,,,,,276,,276',
',276,276,,276,276,276,,276,276,276,276,,,276,276,,,276,,,276,276,,,',
',,,276,,,,,,276,,,,276,276,,276,276,,,,276,276,276,276,276,276,276,276',
'276,,,276,277,277,276,,277,277,,277,277,,,,,,,,,,,,,,,,277,,,,,,277',
',277,,277,277,,277,277,277,,277,277,277,277,,,277,277,,,277,,,277,277',
',,,,,,277,,,,,,277,,,,277,277,,277,277,,,,277,277,277,277,277,277,277',
'277,277,,,277,278,278,277,,278,278,,278,,,,,,,,,,,,,,,,,278,,,,,,278',
',278,,278,278,,278,278,278,,278,278,,,,,278,278,,,278,,,278,278,,,,',
',,278,,,,,,278,,,,278,278,,278,278,,,,278,278,278,278,278,278,278,278',
'278,,,278,288,288,278,,288,288,,288,,,,,,,,,,,,,,,,,288,,,,,,288,,288',
',288,288,,288,288,288,,288,288,288,288,,,288,288,,,288,,,288,288,,,',
',,,288,,,,,,288,,,,288,288,,288,288,,,,288,288,288,288,288,288,288,288',
'288,,,288,380,380,288,,380,380,,380,,,,,,,,,,,,,,,,,380,,,,,,380,,380',
',380,380,,380,380,380,,380,380,380,380,,,380,380,,,380,,,380,380,,,',
',,,380,,,,,,380,,,,380,380,,380,380,,,,380,380,380,380,380,380,380,380',
'380,,,380,66,66,380,,66,66,66,66,,,,,,,,,,,,,,,,,66,,,,,,66,,66,,66',
'66,,66,66,66,,66,66,66,66,,,66,66,,,66,,,66,66,,,,,,,66,,,,,,66,,,,66',
'66,,66,66,,,,66,66,66,66,66,66,66,66,66,,,66,67,67,66,,67,67,67,67,',
',,,,,,,,,,,,,,,67,,,,,,67,,67,,67,67,,67,67,67,,67,67,67,67,,,67,67',
',,67,,,67,67,,,,,,,67,,,,,,67,,,,67,67,,67,67,,,,67,67,67,67,67,67,67',
'67,67,,,67,68,68,67,,68,68,,68,68,,,,,,,,,,,,,,,,68,,,,,,68,,68,,68',
'68,,68,68,68,,68,68,68,68,,,68,68,,,68,,,68,68,,,,,,,68,,,,,,68,,,,68',
'68,,68,68,,,,68,68,68,68,68,68,68,68,68,,,68,73,73,68,,73,73,,73,,,',
',,,,,,,,,,,,,73,,,,,,73,,73,,73,73,,73,73,73,,73,73,73,73,,,73,73,,',
'73,,,73,73,,,,,,,73,,,,,,73,,,,73,73,,73,73,,,,73,73,73,73,73,73,73',
'73,73,,,73,149,149,73,,149,149,,149,149,,,,,,,,,,,,,,,,149,,,,,,149',
',149,,149,149,,149,149,149,,149,149,149,149,,,149,149,,,149,,,149,149',
',,,,,,149,,,,,,149,,,,149,149,,149,149,,,,149,149,149,149,149,149,149',
'149,149,,,149,372,372,149,,372,372,,372,,,,,,,,,,,,,,,,,372,,,,,,372',
',372,,372,372,,372,372,372,,372,372,372,372,,,372,372,,,372,,,372,372',
',,,,,,372,,,,,,372,,,,372,372,,372,372,,,,372,372,372,372,372,372,372',
'372,372,,,372,78,78,372,,78,78,,78,,,,,,,,,,,,,,,,,78,,,,,,78,,78,,78',
'78,,78,78,78,,78,78,,,,,78,78,,,78,,,78,78,,,,,,,78,,,,,,78,,,,78,78',
',78,78,,,,78,78,78,78,78,78,78,78,78,,,78,371,371,78,,371,371,,371,',
',,,,,,,,,,,,,,,371,,,,,,371,,371,,371,371,,371,371,371,,371,371,371',
'371,,,371,371,,,371,,,371,371,,,,,,,371,,,,,,371,,,,371,371,,371,371',
',,,371,371,371,371,371,371,371,371,371,,,371,81,81,371,,81,81,,81,,',
',,,,,,,,,,,,,,81,,,,,,81,,81,,81,81,,81,81,81,,81,81,81,81,,,81,81,',
',81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81,81,,,,81,81,81,81,81,81,81',
'81,81,,,81,369,369,81,,369,369,,369,369,,,,,,,,,,,,,,,,369,,,,,,369',
',369,,369,369,,369,369,369,,369,369,,,,,369,369,,,369,,,369,369,,,,',
',,369,,,,,,369,,,,369,369,,369,369,,,,369,369,369,369,369,369,369,369',
'369,,,369,83,83,369,,83,83,,83,,,,,,,,,,,,,,,,,83,,,,,,83,,83,,83,83',
',83,83,83,,83,83,83,83,,,83,83,,,83,,,83,83,,,,,,,83,,,,,,83,,,,83,83',
',83,83,,,,83,83,83,83,83,83,83,83,83,,,83,84,84,83,,84,84,,84,,,,,,',
',,,,,,,,,,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84',
',,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,84,84,84',
'84,,,84,85,85,84,,85,85,,85,,,,,,,,,,,,,,,,,85,,,,,,85,,85,,85,85,,85',
'85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85,,85',
'85,,,,85,85,85,85,85,85,85,85,85,,,85,86,86,85,,86,86,,86,,,,,,,,,,',
',,,,,,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,86,86,,,86,86,,,86,,,86',
'86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86,86,86,86,86,86,86,86,,',
'86,87,87,86,,87,87,,87,,,,,,,,,,,,,,,,,87,,,,,,87,,87,,87,87,,87,87',
'87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87,,87,87',
',,,87,87,87,87,87,87,87,87,87,,,87,88,88,87,,88,88,,88,,,,,,,,,,,,,',
',,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88,,,88,,,88,88',
',,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88,88,88,,,88',
'89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,,,,,,89,,89,,89,89,,89,89,89',
',89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,',
',,89,89,89,89,89,89,89,89,89,,,89,90,90,89,,90,90,,90,,,,,,,,,,,,,,',
',,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90,,,90,,,90,90',
',,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90,90,90,,,90',
'91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,,,,,,91,91,91,91,91,91,91,91',
'91,91,,91,91,,,,,91,91,91,91,91,,,91,91,,,,,,,91,,,,,91,91,,,,91,91',
',91,91,,,,91,91,91,91,91,91,91,91,91,91,,91,92,92,91,,92,92,,92,,,,',
',,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,',
'92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,92,92,92,92',
',,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,,93,,93,93,,93,93',
'93,,93,93,,,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,,',
',93,93,93,93,93,93,93,93,93,,,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,',
',94,,,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,',
',94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,94,94,,,94,95,95',
'94,,95,95,,95,,,,,,,,,,,,,,,,,95,,,,,,95,,95,,95,95,,95,95,95,,95,95',
',,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95',
'95,95,95,95,95,95,,,95,96,96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,,,,,,96',
',96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96',
',,,96,96,,96,96,,,,96,96,96,96,96,96,96,96,96,,,96,97,97,96,,97,97,',
'97,,,,,,,,,,,,,,,,,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97',
',,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,97,97',
'97,97,,,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98,,,,,,98,,98,,98,98',
',98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98',
'98,,,,98,98,98,98,98,98,98,98,98,,,98,99,99,98,,99,99,,99,,,,,,,,,,',
',,,,,,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99',
',,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,99,99,99,99,,,99',
'100,100,99,,100,100,,100,,,,,,,,,,,,,,,,,100,,,,,,100,,100,,100,100',
',100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100',
',,,100,100,,100,100,,,,100,100,100,100,100,100,100,100,100,,,100,101',
'101,100,,101,101,,101,,,,,,,,,,,,,,,,,101,,,,,,101,,101,,101,101,,101',
'101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101',
'101,,101,101,,,,101,101,101,101,101,101,101,101,101,,,101,102,102,101',
',102,102,,102,,,,,,,,,,,,,,,,,102,,,,,,102,,102,,102,102,,102,102,102',
',102,102,,,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,',
'102,102,,,,102,102,102,102,102,102,102,102,102,,,102,103,103,102,,103',
'103,,103,,,,,,,,,,,,,,,,,103,,,,,,103,,103,,103,103,,103,103,103,,103',
'103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103',
',,,103,103,103,103,103,103,103,103,103,,,103,104,104,103,,104,104,,104',
',,,,,,,,,,,,,,,,104,,,,,,104,,104,,104,104,,104,104,104,,104,104,,,',
',104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104',
'104,104,104,104,104,104,104,104,,,104,105,105,104,,105,105,,105,,,,',
',,,,,,,,,,,,105,,,,,,105,,105,,105,105,,105,105,105,,105,105,,,,,105',
'105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,,,,105,105',
'105,105,105,105,105,105,105,,,105,106,106,105,,106,106,,106,,,,,,,,',
',,,,,,,,106,,,,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106',
',,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106,106',
'106,106,106,106,106,106,,,106,107,107,106,,107,107,,107,,,,,,,,,,,,',
',,,,107,,,,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107',
',,107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,,,,107,107,107,107',
'107,107,107,107,107,,,107,108,108,107,,108,108,,108,,,,,,,,,,,,,,,,',
'108,,,,,,108,,108,,108,108,,108,108,108,,108,108,,,,,108,108,,,108,',
',108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,,,,108,108,108,108,108',
'108,108,108,108,,,108,109,109,108,,109,109,,109,,,,,,,,,,,,,,,,,109',
',,,,,109,,109,,109,109,,109,109,109,,109,109,,,,,109,109,,,109,,,109',
'109,,,,,,,109,,,,,,109,,,,109,109,,109,109,,,,109,109,109,109,109,109',
'109,109,109,,,109,110,110,109,,110,110,,110,,,,,,,,,,,,,,,,,110,,,,',
',110,,110,,110,110,,110,110,110,,110,110,,,,,110,110,,,110,,,110,110',
',,,,,,110,,,,,,110,,,110,110,110,,110,110,,,,110,110,110,110,110,110',
'110,110,110,,,110,111,111,110,,111,111,,111,,,,,,,,,,,,,,,,,111,,,,',
',111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,111',
',,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111,111,111,111,111,111',
'111,111,,,111,112,112,111,,112,112,,112,,,,,,,,,,,,,,,,,112,112,,,,',
'112,,112,,112,112,,112,112,112,,112,112,112,112,,,112,112,,,112,,,112',
'112,,,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112,112,112,112,112,112',
'112,112,112,,,112,362,362,112,,362,362,,362,,,,,,,,,,,,,,,,,362,,,,',
',362,,362,,362,362,,362,362,362,,362,362,362,362,,,362,362,,,362,,,362',
'362,,,,,,,362,,,,,,362,,,,362,362,,362,362,,,,362,362,362,362,362,362',
'362,362,362,,,362,361,361,362,,361,361,,361,,,,,,,,,,,,,,,,,361,,,,',
',361,,361,,361,361,,361,361,361,,361,361,,,,,361,361,,,361,,,361,361',
',,,,,,361,,,,,,361,,,,361,361,,361,361,,,,361,361,361,361,361,361,361',
'361,361,,,361,115,115,361,,115,115,,115,,,,,,,,,,,,,,,,,115,,,,,,115',
',115,,115,115,,115,115,115,,115,115,,,,,115,115,,,115,,,115,115,,,,',
',,115,,,,,,115,,,,115,115,,115,115,,,,115,115,115,115,115,115,115,115',
'115,,,115,116,116,115,,116,116,,116,,,,,,,,,,,,,,,,,116,,,,,,116,,116',
',116,116,,116,116,116,,116,116,,,,,116,116,,,116,,,116,116,,,,,,,116',
',,,,,116,,,,116,116,,116,116,,,,116,116,116,116,116,116,116,116,116',
',,116,358,358,116,,358,358,,358,,,,,,,,,,,,,,,,,358,,,,,,358,,358,,358',
'358,,358,358,358,,358,358,,,,,358,358,,,358,,,358,358,,,,,,,358,,,,',
',358,,,,358,358,,358,358,,,,358,358,358,358,358,358,358,358,358,,,358',
'292,292,358,,292,292,,292,292,,,,,,,,,,,,,,,,292,,,,,,292,,292,,292',
'292,,292,292,292,,292,292,292,292,,,292,292,,,292,,,292,292,,,,,,,292',
',,,,,292,,,,292,292,,292,292,,,,292,292,292,292,292,292,292,292,292',
',,292,119,119,292,,119,119,,119,,,,,,,,,,,,,,,,,119,,,,,,119,,119,,119',
'119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,',
',119,,,,119,119,,119,119,,,,119,119,119,119,119,119,119,119,119,,,119',
'346,346,119,,346,346,,346,,,,,,,,,,,,,,,,,346,,,,,,346,,346,,346,346',
',346,346,346,,346,346,,,,,346,346,,,346,,,346,346,,,,,,,346,,,,,,346',
',,,346,346,,346,346,,,,346,346,346,346,346,346,346,346,346,,,346,293',
'293,346,,293,293,,293,,,,,,,,,,,,,,,,,293,,,,,,293,,293,,293,293,,293',
'293,293,,293,293,293,293,,,293,293,,,293,,,293,293,,,,,,,293,,,,,,293',
',,,293,293,,293,293,,,,293,293,293,293,293,293,293,293,293,,,293,320',
'320,293,,320,320,,320,,,,,,,,,,,,,,,,,320,,,,,,320,,320,,320,320,,320',
'320,320,,320,320,,,,,320,320,,,320,,,320,320,,,,,,,320,,,,,,320,,,,320',
'320,,320,320,,,,320,320,320,320,320,320,320,320,320,,,320,141,141,320',
',141,141,,141,,,,,,,,,,,,,,,,,141,141,,,,,141,,141,,141,141,,141,141',
'141,,141,141,141,141,,,141,141,,,141,,,141,141,,,,,,,141,,,,,,141,,',
',141,141,,141,141,,,,141,141,141,141,141,141,141,141,141,,,141,316,316',
'141,,316,316,,316,,,,,,,,,,,,,,,,,316,,,,,,316,,316,,316,316,,316,316',
'316,,316,316,,,,,316,316,,,316,,,316,316,,,,,,,316,,,,,,316,,,,316,316',
',316,316,,,,316,316,316,316,316,316,316,316,316,,,316,315,315,316,,315',
'315,,315,,,,,,,,,,,,,,,,,315,,,,,,315,,315,,315,315,,315,315,315,,315',
'315,,,,,315,315,,,315,,,315,315,,,,,,,315,,,,,,315,,,,315,315,,315,315',
',,,315,315,315,315,315,315,315,315,315,,,315,314,314,315,,314,314,,314',
',,,,,,,,,,,,,,,,314,,,,,,314,,314,,314,314,,314,314,314,,314,314,,,',
',314,314,,,314,,,314,314,,,,,,,314,,,,,,314,,,,314,314,,314,314,,,,314',
'314,314,314,314,314,314,314,314,,,314,313,313,314,,313,313,,313,,,,',
',,,,,,,,,,,,313,,,,,,313,,313,,313,313,,313,313,313,,313,313,,,,,313',
'313,,,313,,,313,313,,,,,,,313,,,,,,313,,,,313,313,,313,313,,,,313,313',
'313,313,313,313,313,313,313,,,313,175,175,313,,175,175,,175,,,,,,,,',
',,,,,,,,175,,,,,,175,,175,,175,175,,175,175,175,,175,175,175,175,,,175',
'175,,,175,,,175,175,,,,,,,175,,,,,,175,,,,175,175,,175,175,,,,175,175',
'175,175,175,175,175,175,175,,142,175,142,,175,,,,,,,,142,142,142,,142',
',142,142,,142,142,142,142,,,,,,,,,,,,,,,,142,,,,142,142,,,142,142,142',
'142,142,142,,142,142,144,,144,,,142,,,,,,,144,144,144,,144,,144,144',
',144,144,144,144,,,,,,,,,,142,,,,,,144,,,,144,144,,,144,144,144,144',
'144,144,,144,144,145,,145,,,144,,,,,,,145,145,145,,145,230,145,145,',
'145,145,145,145,,,,,,,230,,230,144,230,230,,,,145,,,,145,145,,,145,145',
'145,145,145,145,,145,145,230,,,,,145,,,230,230,230,230,230,230,393,230',
'230,,,,,,230,,,,393,393,393,,393,,393,393,145,393,393,393,393,,,,,,',
',,,,,,230,,,393,,,,393,393,,,393,393,393,393,393,393,9,393,393,,,,,',
'393,,,,9,9,9,,9,,9,9,,9,9,9,9,,,,,,,,,,,,,393,,,9,,,,9,9,,,9,9,9,9,9',
'9,394,9,9,,,,,,9,,,,394,394,394,,394,,394,394,,394,394,394,394,,,,,',
',,,,,,,9,,,394,,,,394,394,,,394,394,394,394,394,394,395,394,394,,,,',
',394,,,,395,395,395,,395,,395,395,,395,395,395,395,,,,,,,,,,,,,394,',
',395,,,,395,395,,,395,395,395,395,395,395,396,395,395,,,,,,395,,,,396',
'396,396,,396,,396,396,,396,396,396,396,,,,,,,,,,,,,395,,,396,,,,396',
'396,,,396,396,396,396,396,396,415,396,396,,,,,,396,,,,415,415,415,,415',
',415,415,,415,415,415,415,,,,,,,,,,,,,396,,,415,,,,415,415,,,415,415',
'415,415,415,415,253,415,415,,,,,,415,,,,253,253,253,253,253,,253,253',
',253,253,253,253,,,,,,,,,,,,,415,,,253,,,,253,253,,,253,253,253,253',
'253,253,248,253,253,,,,,,253,,,,248,248,248,,248,,248,248,,248,248,248',
'248,,,,,,,,,,,,,253,,,248,,,,248,248,,,248,248,248,248,248,248,242,248',
'248,,,,,,248,,,,242,242,242,,242,231,242,242,,242,242,242,242,,,,,,',
'231,,231,,231,231,248,,,242,,,,242,242,,,242,242,242,242,242,242,,242',
'242,231,,,,,242,,,231,231,231,231,231,231,400,231,231,,,,,,231,,,,400',
'400,400,,400,,400,400,242,400,400,400,400,,,,,,,,,,,,,231,,,400,,,,400',
'400,,,400,400,400,400,400,400,177,400,400,,,,,,400,,,,177,177,177,,177',
',177,177,,177,177,177,177,,,,,,,,,,,,,400,,,177,,,,177,177,,232,177',
'177,177,177,177,177,,177,177,,,,232,232,177,232,,232,232,,232,,,,,177',
'177,,,,,,,,,,,,,232,,,,177,,,,232,232,232,232,232,232,238,232,232,,',
'238,,,232,,,,238,238,238,,238,,238,238,,238,238,238,238,,,,,,,,,,,,',
'232,,,238,,,,238,238,,237,238,238,238,238,238,238,,238,238,,,237,237',
'237,238,237,,237,237,,237,237,237,237,,,,,,,,,,,,,,,,237,,,,238,237',
',236,237,237,237,237,237,237,,237,237,,,236,236,236,237,236,235,236',
'236,,236,236,236,236,,,,,,235,235,,235,,235,235,,235,,236,,,,237,,,',
'236,236,236,236,236,236,,236,236,235,,,,,236,,234,235,235,235,235,235',
'235,,235,235,,,,234,234,235,234,233,234,234,,234,,,,,,236,,,233,233',
',233,,233,233,,233,,234,,,,235,,,,234,234,234,234,234,234,,234,234,233',
',,,,234,,,233,233,233,233,233,233,189,233,233,,,,,,233,,,,189,189,189',
'189,189,,189,189,234,189,189,189,189,,,,,,,,,,,,,233,,,189,,,,189,189',
',,189,189,189,189,189,189,,189,189,,247,247,247,247,189,247,247,247',
',247,,247,247,,,,,,,247,247,247,,,,247,,,,,,,,189,,,,247,247,,,,,,,',
',,,,247,247,247,247,247,247,247,247,247,247,373,373,373,373,,373,373',
'373,,373,,373,373,,,,,,,373,373,373,,,,373,,,,,,,,,,,,373,373,,,,,,',
',,,,,373,373,373,373,373,373,373,373,373,373,353,353,353,353,,353,353',
'353,,353,,353,353,,,,,,,353,353,353,,,,353,,,,,,,,,,,,353,353,,,,,,',
',,,,,353,353,353,353,353,353,353,353,353,353,347,347,347,347,,347,347',
'347,,347,,347,347,,,,,,,347,347,347,,,,347,,,,,,,,,,,,347,347,,,,,,',
',,,,,347,347,347,347,347,347,347,347,347,347,312,312,312,312,,312,312',
'312,,312,,312,312,,,,,,,312,312,312,,,,312,,,,,,,,,,,,312,312,,,,,,',
',,,,,312,312,312,312,312,312,312,312,312,312,310,310,310,310,,310,310',
'310,,310,,310,310,,,,,,,310,310,310,,,,310,,,,,,,,,,,,310,310,,,,,,',
',,,,,310,310,310,310,310,310,310,310,310,310' ]
        racc_action_check = arr = ::Array.new(9676, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   437,   nil,   nil,   182,   419,   nil,   868,   419,  8418,
   642,   734,   390,   nil,   nil,   nil,   171,  1010,  1102,  1194,
  1286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   145,   320,   361,  1654,  1746,  1838,
    20,   112,   111,   365,  1073,   384,    78,    22,   103,   201,
   138,   105,   nil,   nil,   nil,   nil,  3034,  3126,  3218,   nil,
   nil,   nil,   nil,  3310,   nil,   267,   268,   nil,  3586,   nil,
   332,  3770,   315,  3954,  4046,  4138,  4230,  4322,  4414,  4506,
  4598,  4690,  4782,  4874,  4966,  5058,  5150,  5242,  5334,  5426,
  5518,  5610,  5702,  5794,  5886,  5978,  6070,  6162,  6254,  6346,
  6438,  6530,  6622,   262,   293,  6898,  6990,   286,   244,  7266,
   214,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   292,   nil,   nil,  1198,   248,  1014,  1382,   135,   nil,   146,
   225,  7634,  8179,   nil,  8236,  8293,    97,    85,   568,  3402,
    61,   nil,    -4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   140,   nil,   174,   nil,   197,   nil,     5,   nil,   nil,   333,
   nil,   133,   nil,   nil,    64,  8094,   250,  8921,  2022,   nil,
   371,   nil,   nil,   nil,   nil,   379,   380,   388,   405,  9251,
   416,  1930,    -1,    -9,    44,  1562,   826,   550,   nil,   nil,
    90,   159,    67,    -2,     4,   758,   664,   751,   981,   659,
    24,     9,    -4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  1376,   646,   922,    94,     2,  1192,  1106,  1290,   186,   462,
  8310,  8813,  8968,  9197,  9180,  9133,  9116,  9069,  9022,   nil,
   nil,  2206,  8796,   358,   352,   284,   nil,  9284,  8742,   306,
   nil,   329,   305,  8688,   nil,   302,   nil,   252,   317,   nil,
   nil,  2390,   nil,   303,   nil,   nil,   nil,   nil,   nil,   278,
   237,   -24,   238,   nil,    -7,   nil,  2574,  2666,  2758,   141,
   136,   116,    19,   nil,   339,   935,   -28,    31,  2850,    87,
    96,   nil,  7174,  7450,   nil,   nil,   nil,   nil,  2298,   nil,
   nil,   nil,   nil,   115,   nil,   nil,   nil,   nil,   120,   132,
  9584,   138,  9524,  8002,  7910,  7818,  7726,   177,   nil,   198,
  7542,   188,   nil,   204,   nil,   nil,   nil,   nil,   nil,   208,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   224,  7358,  9464,   238,   nil,
   524,   nil,   245,  9404,   277,   nil,   219,   255,  7082,   nil,
   nil,  6806,  6714,   nil,   295,    70,   312,   292,     9,  3862,
   nil,  3678,  3494,  9344,   nil,   333,   nil,  1027,   nil,   nil,
  2942,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   275,   124,
   337,   nil,   nil,  8364,  8472,  8526,  8580,   356,  2482,   nil,
  8867,   -69,   372,   nil,   nil,   370,  2114,   nil,   nil,   nil,
   358,   373,   nil,   nil,   nil,  8634,     6,    77,   nil,  1470,
   384,   361,   nil,   386,  1378,   392,   nil,   nil,   394,   nil,
   nil,   398,   400,   918,   nil,   407,   nil,   nil,   408,   378,
   nil,   nil,   nil,   nil,   nil,   414,   nil,   416,   nil,   nil,
   nil,   458,   nil,   366,   274,   nil,   nil,   424,   425,   nil,
   nil,   nil,    90,   nil,   nil,   428,   nil,   432,   nil,   435,
   nil,   nil,   nil,   nil,   404,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -269,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -269,  -269,  -181,   -33,   -34,   -35,   -36,  -269,  -269,  -269,
  -269,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -91,   -95,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -219,  -242,  -201,  -202,
  -203,  -204,  -197,  -198,  -199,  -200,  -269,  -269,  -269,  -215,
  -216,  -217,  -218,  -269,  -221,  -269,  -234,  -237,  -269,  -243,
  -269,  -269,    -7,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -131,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -269,  -126,  -268,  -268,   -22,   -23,  -269,
  -268,  -150,  -174,  -175,  -176,  -177,  -178,  -179,  -180,  -181,
  -269,  -147,  -148,   -47,  -181,   -48,   -55,  -269,   -92,  -269,
  -269,  -269,  -269,  -102,  -269,  -269,  -268,  -268,  -269,  -269,
  -244,  -161,  -163,  -164,  -165,  -166,  -167,  -169,  -170,  -219,
  -268,   -14,  -244,  -206,  -244,  -208,  -269,  -211,  -212,  -269,
  -220,  -269,  -225,  -228,  -269,  -232,  -269,  -269,  -269,   479,
    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -269,
  -244,  -269,   -84,   -85,   -86,  -255,  -261,  -249,  -132,  -135,
  -201,  -202,  -203,  -204,  -269,  -252,  -266,  -181,  -258,  -264,
  -198,  -199,  -200,  -248,  -253,  -254,  -256,  -257,  -259,  -267,
   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -49,   -50,   -51,   -52,   -53,   -54,   -56,   -57,  -269,   -58,
  -120,  -269,   -61,  -244,  -244,   -88,   -96,  -131,  -130,  -269,
  -129,  -269,  -246,  -269,   -28,  -268,  -182,  -269,  -269,   -59,
   -97,  -269,  -100,  -244,  -185,  -187,  -188,  -189,  -190,  -192,
  -269,  -269,  -195,  -242,  -269,   -94,  -269,  -269,  -269,  -269,
  -269,  -269,  -269,  -158,  -268,  -245,  -269,  -269,  -245,  -269,
  -269,  -209,  -269,  -269,  -222,  -223,  -224,  -226,  -269,  -229,
  -230,  -231,  -233,  -244,  -235,  -238,  -240,  -241,    -8,  -269,
  -131,  -269,  -245,  -269,  -269,  -269,  -269,  -244,  -122,  -269,
  -245,  -269,   -90,  -244,  -134,  -136,  -137,  -138,  -139,  -269,
  -249,  -250,  -251,  -252,  -255,  -258,  -260,  -261,  -262,  -263,
  -264,  -265,  -266,  -127,  -128,  -269,  -247,  -131,  -269,  -153,
  -269,  -183,  -244,  -131,  -269,   -99,  -269,  -245,  -269,  -193,
  -194,  -269,  -269,   -93,  -269,  -105,  -269,  -111,  -269,  -269,
  -115,  -268,  -268,  -131,  -157,  -269,  -171,  -269,  -162,  -168,
  -268,   -15,  -205,  -207,  -210,  -213,  -214,  -227,  -269,  -269,
  -244,   -26,  -133,  -142,  -140,  -141,  -124,  -269,  -245,   -60,
   -62,   -87,  -269,   -25,   -29,  -244,  -268,  -154,  -155,  -156,
  -269,  -244,   -98,  -101,  -186,  -191,  -269,  -105,  -104,  -269,
  -269,  -111,  -110,  -269,  -269,  -269,  -114,  -116,  -269,  -151,
  -152,  -269,  -244,  -269,  -172,  -269,  -236,  -239,  -269,   -30,
  -121,  -123,   -89,  -125,   -27,  -269,  -184,  -269,  -196,  -103,
  -106,  -269,  -109,  -269,  -268,  -143,  -144,  -269,  -269,  -160,
  -173,   -24,   -31,  -149,  -146,  -269,  -108,  -269,  -113,  -269,
  -118,  -119,  -145,  -159,  -246,  -107,  -112,  -117,   -32 ]

racc_goto_table = [
     2,   138,   133,   135,   136,   252,   155,   137,   240,   121,
   153,   170,   243,   345,   378,   272,   250,   250,   305,   370,
   263,    82,   162,   164,   239,   130,   317,   190,   369,   428,
   431,   392,   142,   144,   145,   117,   118,   450,   435,   249,
   251,   260,   438,   469,   348,   407,   375,   146,   147,   422,
   418,   272,   160,   161,   161,   169,   303,   404,   379,   414,
   172,   148,   360,   177,   445,   359,   385,   299,   244,   300,
   181,   182,   183,   184,     3,   297,   189,   220,   221,   222,
   223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
   233,   234,   235,   236,   237,   238,   242,   274,   180,   161,
   248,   248,   449,   452,   253,   298,   434,   296,   173,   175,
   427,   301,   185,   186,   187,   188,     1,   255,   nil,   nil,
   nil,   284,   nil,   nil,   nil,   nil,   nil,   258,   161,   nil,
   nil,   121,   272,   289,   nil,   290,   nil,   352,   nil,   318,
   nil,   nil,   nil,   279,   280,   281,   nil,   nil,   nil,   282,
   nil,   nil,   nil,   nil,   nil,   nil,   349,   287,   nil,   nil,
   155,   311,   nil,   nil,   153,   308,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   302,   135,   nil,   309,   nil,
   142,   144,   145,   323,   nil,   376,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   322,   146,   147,   121,   nil,   160,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   319,   321,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   238,   nil,   nil,   nil,
   437,   nil,   272,   nil,   356,   478,   387,   155,   nil,   nil,
   nil,   153,   nil,   nil,   nil,   nil,   390,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   354,   416,   242,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   430,   430,   388,   381,   364,   366,   nil,   169,
   386,   430,   nil,   405,   nil,   172,   nil,   nil,   397,   411,
   nil,   nil,   nil,   nil,   402,   nil,   441,   nil,   393,   394,
   395,   396,   nil,   nil,   nil,   400,   nil,   430,   nil,   432,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   410,   nil,   nil,   nil,   nil,   nil,   155,
   nil,   253,   nil,   153,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   415,   nil,   nil,   242,   408,   474,   381,
   nil,   nil,   nil,   nil,   242,   470,   nil,   442,   nil,   nil,
   nil,   439,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   444,   nil,   nil,   nil,
   nil,   nil,   447,   238,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   457,   142,   nil,   nil,   nil,   nil,   400,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   458,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   253,   nil,   nil,
   nil,   465,   nil,   467,   471 ]

racc_goto_check = [
     2,    42,    10,    10,    10,    13,    39,     6,    55,    62,
    40,    86,    22,    14,    71,    41,    54,    54,    94,    52,
    47,     5,     8,     8,    21,    65,    56,    11,    51,    64,
    64,    59,    10,    10,    10,     9,     9,    48,    64,    58,
    58,    46,    12,    53,    67,    68,    70,    62,    62,    50,
    49,    41,    62,     6,     6,     6,    47,    16,    73,    74,
     6,    65,    75,    10,    64,    77,    81,    82,     8,    83,
     6,     6,     6,     6,     3,    87,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,     8,     5,     6,
    10,    10,    49,    50,    10,    88,    71,    90,    91,    92,
    52,    93,     9,     9,     9,     9,     1,    63,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,    62,     6,   nil,
   nil,    62,    41,    15,   nil,    15,   nil,    47,   nil,    55,
   nil,   nil,   nil,    63,    63,    62,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,    54,    63,   nil,   nil,
    39,    15,   nil,   nil,    40,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,    10,   nil,     2,   nil,
    10,    10,    10,    11,   nil,    54,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,    62,    62,    62,   nil,    62,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
    94,   nil,    41,   nil,    15,    14,    86,    39,   nil,   nil,
   nil,    40,   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,    22,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    54,    54,    15,     6,     2,     2,   nil,     6,
     6,    54,   nil,    11,   nil,     6,   nil,   nil,    15,    11,
   nil,   nil,   nil,   nil,    15,   nil,    55,   nil,    10,    10,
    10,    10,   nil,   nil,   nil,    10,   nil,    54,   nil,    11,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,    39,
   nil,    10,   nil,    40,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,    10,    62,    13,     6,
   nil,   nil,   nil,   nil,    10,    54,   nil,    42,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,    15,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,    10,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   116,     0,    74,   nil,    17,   -13,   nil,   -44,    25,
   -15,   -64,  -348,  -114,  -239,   -29,  -289,   nil,   nil,   nil,
   nil,   -86,   -99,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -48,
   -44,  -125,   -44,   nil,   nil,   nil,   -98,  -120,  -382,  -315,
  -318,  -250,  -259,  -411,   -99,  -102,  -215,   nil,   -76,  -281,
   nil,   nil,    -3,    -3,  -342,     9,   nil,  -211,  -305,   nil,
  -238,  -271,   nil,  -228,  -298,  -209,   nil,  -205,   nil,   nil,
   nil,  -226,  -107,  -105,   nil,   nil,   -62,   -96,   -66,   nil,
   -64,    33,    33,   -64,  -159 ]

racc_goto_default = [
   nil,   nil,   429,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   254,    13,    14,    15,
    16,   nil,   368,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,   nil,    45,    46,   139,   nil,   nil,   143,   nil,
   nil,   nil,   nil,   nil,   256,   nil,   nil,   114,   nil,   198,
   204,   199,    52,   nil,   nil,   nil,   120,   nil,   nil,   150,
   nil,   151,   152,   156,   264,   265,   266,   267,   268,   271,
   166,   168,    69,    70,    71,    73,   nil,   nil,   nil,   171,
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 100, :_reduce_1,
  1, 100, :_reduce_2,
  0, 100, :_reduce_3,
  1, 101, :_reduce_4,
  1, 103, :_reduce_5,
  3, 103, :_reduce_6,
  2, 103, :_reduce_7,
  1, 104, :_reduce_8,
  3, 104, :_reduce_9,
  1, 105, :_reduce_none,
  3, 105, :_reduce_11,
  3, 105, :_reduce_12,
  3, 105, :_reduce_13,
  1, 107, :_reduce_14,
  3, 107, :_reduce_15,
  1, 106, :_reduce_none,
  3, 106, :_reduce_17,
  3, 106, :_reduce_18,
  3, 106, :_reduce_19,
  3, 106, :_reduce_20,
  1, 108, :_reduce_none,
  2, 108, :_reduce_22,
  2, 108, :_reduce_23,
  7, 108, :_reduce_24,
  5, 108, :_reduce_25,
  5, 108, :_reduce_26,
  4, 115, :_reduce_27,
  1, 112, :_reduce_28,
  3, 112, :_reduce_29,
  1, 111, :_reduce_30,
  2, 111, :_reduce_31,
  4, 111, :_reduce_32,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_37,
  3, 109, :_reduce_38,
  3, 109, :_reduce_39,
  3, 109, :_reduce_40,
  3, 109, :_reduce_41,
  3, 109, :_reduce_42,
  3, 109, :_reduce_43,
  3, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 109, :_reduce_46,
  2, 109, :_reduce_47,
  2, 109, :_reduce_48,
  3, 109, :_reduce_49,
  3, 109, :_reduce_50,
  3, 109, :_reduce_51,
  3, 109, :_reduce_52,
  3, 109, :_reduce_53,
  3, 109, :_reduce_54,
  2, 109, :_reduce_55,
  3, 109, :_reduce_56,
  3, 109, :_reduce_57,
  3, 109, :_reduce_58,
  3, 109, :_reduce_59,
  5, 119, :_reduce_60,
  1, 121, :_reduce_61,
  3, 121, :_reduce_62,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_82,
  1, 116, :_reduce_83,
  1, 116, :_reduce_84,
  1, 116, :_reduce_85,
  1, 116, :_reduce_86,
  5, 118, :_reduce_87,
  3, 118, :_reduce_88,
  6, 118, :_reduce_89,
  4, 118, :_reduce_90,
  1, 123, :_reduce_91,
  2, 123, :_reduce_92,
  4, 142, :_reduce_93,
  3, 142, :_reduce_94,
  1, 142, :_reduce_95,
  3, 143, :_reduce_96,
  2, 141, :_reduce_97,
  3, 145, :_reduce_98,
  2, 145, :_reduce_99,
  2, 144, :_reduce_100,
  4, 144, :_reduce_101,
  2, 126, :_reduce_102,
  5, 147, :_reduce_103,
  4, 147, :_reduce_104,
  0, 148, :_reduce_none,
  2, 148, :_reduce_106,
  4, 148, :_reduce_107,
  3, 148, :_reduce_108,
  6, 127, :_reduce_109,
  5, 127, :_reduce_110,
  0, 149, :_reduce_none,
  4, 149, :_reduce_112,
  3, 149, :_reduce_113,
  5, 125, :_reduce_114,
  1, 150, :_reduce_115,
  2, 150, :_reduce_116,
  5, 151, :_reduce_117,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 120, :_reduce_none,
  4, 120, :_reduce_121,
  1, 155, :_reduce_122,
  3, 155, :_reduce_123,
  3, 154, :_reduce_124,
  6, 124, :_reduce_125,
  2, 124, :_reduce_126,
  3, 156, :_reduce_127,
  3, 156, :_reduce_128,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  0, 110, :_reduce_131,
  1, 110, :_reduce_132,
  3, 110, :_reduce_133,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  3, 158, :_reduce_140,
  3, 158, :_reduce_141,
  3, 158, :_reduce_142,
  6, 128, :_reduce_143,
  6, 129, :_reduce_144,
  7, 117, :_reduce_145,
  7, 117, :_reduce_146,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  7, 130, :_reduce_149,
  1, 165, :_reduce_150,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 166, :_reduce_none,
  2, 166, :_reduce_154,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  4, 132, :_reduce_157,
  3, 132, :_reduce_158,
  7, 131, :_reduce_159,
  6, 131, :_reduce_160,
  1, 168, :_reduce_161,
  3, 168, :_reduce_162,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_165,
  1, 170, :_reduce_none,
  1, 171, :_reduce_167,
  3, 171, :_reduce_168,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  1, 169, :_reduce_none,
  2, 169, :_reduce_172,
  6, 134, :_reduce_173,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_181,
  1, 162, :_reduce_182,
  2, 162, :_reduce_183,
  4, 162, :_reduce_184,
  1, 146, :_reduce_185,
  3, 146, :_reduce_186,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  3, 176, :_reduce_191,
  1, 176, :_reduce_192,
  2, 177, :_reduce_193,
  2, 175, :_reduce_194,
  1, 178, :_reduce_195,
  4, 178, :_reduce_196,
  1, 122, :_reduce_197,
  1, 135, :_reduce_198,
  1, 135, :_reduce_199,
  1, 135, :_reduce_200,
  1, 135, :_reduce_201,
  1, 135, :_reduce_202,
  1, 135, :_reduce_203,
  1, 135, :_reduce_204,
  4, 136, :_reduce_205,
  2, 136, :_reduce_206,
  4, 136, :_reduce_207,
  2, 136, :_reduce_208,
  3, 137, :_reduce_209,
  4, 137, :_reduce_210,
  2, 137, :_reduce_211,
  1, 179, :_reduce_212,
  3, 179, :_reduce_213,
  3, 180, :_reduce_214,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 181, :_reduce_218,
  1, 181, :_reduce_219,
  2, 182, :_reduce_220,
  1, 184, :_reduce_221,
  1, 186, :_reduce_222,
  1, 187, :_reduce_223,
  2, 185, :_reduce_224,
  1, 188, :_reduce_225,
  1, 189, :_reduce_226,
  2, 189, :_reduce_227,
  2, 183, :_reduce_228,
  2, 190, :_reduce_229,
  2, 190, :_reduce_230,
  3, 102, :_reduce_231,
  0, 192, :_reduce_none,
  1, 192, :_reduce_none,
  0, 191, :_reduce_234,
  2, 191, :_reduce_235,
  4, 191, :_reduce_236,
  1, 133, :_reduce_237,
  3, 133, :_reduce_238,
  5, 133, :_reduce_239,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 140, :_reduce_242,
  1, 138, :_reduce_243,
  0, 114, :_reduce_none,
  1, 114, :_reduce_245,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  0, 153, :_reduce_268 ]

racc_reduce_n = 269

racc_shift_n = 479

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :SITE_R => 89,
  :APPLICATION => 90,
  :PRODUCES => 91,
  :CONSUMES => 92,
  :SITE => 93,
  :LOW => 94,
  :HIGH => 95,
  :LISTSTART => 96,
  :SPLAT => 97,
  :MODULO => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_60(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_61(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_82(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 259)
  def _reduce_83(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_84(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_85(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_86(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_88(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_89(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_91(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_92(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_93(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 297)
  def _reduce_94(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_95(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_96(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_97(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_98(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_99(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_100(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_101(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_102(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 336)
  def _reduce_103(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_104(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 105 omitted

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_106(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_107(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_108(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_109(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_110(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 111 omitted

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_112(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_113(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 388)
  def _reduce_114(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_115(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 395)
  def _reduce_116(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 400)
  def _reduce_117(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_121(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_122(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_123(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_124(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_125(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_126(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_127(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_128(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_131(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_132(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 458)
  def _reduce_133(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_140(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_141(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 485)
  def _reduce_142(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 494)
  def _reduce_143(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_144(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 511)
  def _reduce_145(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_146(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 535)
  def _reduce_149(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_150(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 554)
  def _reduce_154(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_157(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_158(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_159(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_160(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_161(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_162(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_165(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 166 omitted

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_167(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_168(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_172(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_173(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_181(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_182(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_183(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_184(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_185(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_186(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_191(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_192(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_193(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_194(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_195(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_196(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_197(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_198(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_199(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_200(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_201(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_202(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_203(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_204(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_205(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_206(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_207(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_208(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_209(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_210(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_211(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_212(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_213(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_214(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_218(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_219(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_220(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_221(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_222(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_223(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_224(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_225(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 732)
  def _reduce_226(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_227(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_228(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 739)
  def _reduce_229(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_230(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_231(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

module_eval(<<'.,.,', 'egrammar.ra', 750)
  def _reduce_234(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 751)
  def _reduce_235(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 752)
  def _reduce_236(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 755)
  def _reduce_237(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_238(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 757)
  def _reduce_239(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 240 omitted

# reduce 241 omitted

module_eval(<<'.,.,', 'egrammar.ra', 763)
  def _reduce_242(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 766)
  def _reduce_243(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 244 omitted

module_eval(<<'.,.,', 'egrammar.ra', 772)
  def _reduce_245(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

# reduce 260 omitted

# reduce 261 omitted

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

module_eval(<<'.,.,', 'egrammar.ra', 801)
  def _reduce_268(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
